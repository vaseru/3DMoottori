#version 330 core
out vec4 Fcolor;
//Material
struct Material {
sampler2D diffuse;
sampler2D specular;
float shine; //2/4/8/16/32/64/128/256
};
//Light
struct Light {
vec3 position;
vec3 direction;
vec3 ambient;
vec3 diffuse;
vec3 specular;
float constant;
float linear;
float quadratic;
float cutOff;
float outerCutOff;
};
//Direction Light
struct DirLight {
vec3 direction;
vec3 ambient;
vec3 diffuse;
vec3 specular;
};
//Point Light
struct PointLight {
vec3 position;
float constant;
float linear;
float quadratic;
vec3 ambient;
vec3 diffuse;
vec3 specular;
};
#define NR_POINT_LIGHTS 3
uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform Material material;
uniform Light light;
uniform DirLight dirLight;
uniform PointLight pointLights[NR_POINT_LIGHTS];
in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcPointBlinnLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
//main
void main()
{
vec3 norm = normalize(Normal);
vec3 viewDir = normalize(viewPos - FragPos);
vec3 result = CalcDirLight(dirLight, norm, viewDir);
for(int i = 0; i < NR_POINT_LIGHTS; i++)
{
result += CalcPointBlinnLight(pointLights[i],norm, FragPos, viewDir);
}
//result
Fcolor = vec4(result, 1.0);
}
//func CalcDir
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
vec3 lightDir = normalize(-light.direction);
float diff = max(dot(normal,lightDir),0.0);
vec3 reflectDir = reflect(-lightDir, normal);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shine);
vec3 ambient = light.ambient * vec3(texture(material.diffuse,TexCoords));
vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,TexCoords));
vec3 specular = light.specular * spec * vec3(texture(material.specular,TexCoords));
return(ambient + diffuse + specular);
}
//func CalcPoint
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
vec3 lightDir = normalize(light.position - FragPos);
vec3 halfwayDir = normalize(lightDir + viewDir);
float diff = max(dot(normal,lightDir),0.0);
vec3 reflectDir = reflect(-lightDir, normal);
//float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shine);
float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shine);
float distance = length(light.position - FragPos);
float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
vec3 ambient = light.ambient * vec3(texture(material.diffuse,TexCoords));
vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,TexCoords));
vec3 specular = light.specular * spec * vec3(texture(material.specular,TexCoords));
ambient *= attenuation;
diffuse *= attenuation;
specular *= attenuation;
return(ambient + diffuse + specular);
};
//func CalcPointBlinn
vec3 CalcPointBlinnLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
vec3 lightDir = normalize(light.position - FragPos);
float diff = max(dot(normal,lightDir),0.0);
vec3 reflectDir = reflect(-lightDir, normal);
float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shine);
float distance = length(light.position - FragPos);
float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
vec3 ambient = light.ambient * vec3(texture(material.diffuse,TexCoords));
vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,TexCoords));
vec3 specular = light.specular * spec * vec3(texture(material.specular,TexCoords));
ambient *= attenuation;
diffuse *= attenuation;
specular *= attenuation;
return(ambient + diffuse + specular);
};